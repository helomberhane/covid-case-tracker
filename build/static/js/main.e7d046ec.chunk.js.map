{"version":3,"sources":["utils/axios.js","actions/caseRecords.js","reducers/caseRecords.js","actions/medicalFacilityRecords.js","reducers/medicalFacilityRecords.js","reducers/reducers.js","reducers/store.js","components/LandingPage/Map.jsx","components/LandingPage/TotalCasesPanel.jsx","components/LandingPage/MedicalFacilityCard.jsx","components/LandingPage/MedicalFacilitiesPanel.jsx","components/LandingPage/NewPanel.jsx","components/LandingPage/DataPanel.jsx","components/LandingPage/RegionDetails.jsx","components/LandingPage/HospitalDetails.jsx","components/LandingPage/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["axiosClient","axios","create","defaults","headers","post","getCaseRecords","dispatch","type","get","then","response","payload","data","catch","error","getCaseRecordsFailure","setCurrentRegionRecord","regionRecord","clearCurrentRegionRecord","defaultState","loading","caseRecords","currentRegionRecord","getMedicalFacilityRecords","getMedicalFacilityRecordsFailure","medicalFacilityRecords","rootReducer","combineReducers","state","action","newState","Object","assign","_map","caseRecord","admin_region_3_id","parseInt","medicalFacilityRecord","osm_id","latitude","parseFloat","longitude","store","createStore","asyncReducer","applyMiddleware","thunk","MapContainer","this","props","centerCoordinates","polygons","markers","infoWindows","google","className","initialCenter","zoom","Component","GoogleApiWrapper","apiKey","process","TotalCasesPanel","totalCount","totalCaseRecordsRecovered","totalCaseRecordsHospitalized","totalCaseRecordsIsolated","totalCaseRecordsDeceased","topFiveRegions","totalCasesHeaderClasses","classNames","totalRecoveredHeaderClasses","totalHospitalizedHeaderClasses","totalIsolatedHeaderClasses","totalDeceasedHeaderClasses","topRegions","index","key","name","totalCases","firstCase","moment","format","Row","Col","xs","capitalizeFirstLetter","string","charAt","toUpperCase","slice","MedicalFacilityCard","statusClasses","status","percentFreeBeds","occupied_beds","total_beds","availableBedsClasses","percentICUFreeBeds","occupied_icu_beds","total_icu_beds","availableICUBedsClasses","availableTestingKitsClasses","testing_kits","availableMasksClasses","masks","availableGlovesClasses","gloves","amenity","MedicalFacilitiesPanel","title","medicalFacilitiesForRegion","console","log","medicalFacilitiesRecordsForRegion","_filter","adminRegion3Id","length","connect","bindActionCreators","NewPanel","DataPanel","currentTab","showPanel","bind","panelName","setState","loadingCaseRecords","loadingMedicalFacilityRecords","tabOneClasses","tabTwoClasses","tabThreeClasses","finishedLoadingCaseRecords","finishedLoadingMedicalFacilityRecords","currentPanel","onClick","e","RegionDetails","totalRecovered","totalHospitalized","totalIsolated","totalDeceased","HospitalDetails","street","city","admin_region_3","opening_hours","contact_number","operator","operator_contact_number","POLYGON_COLORS","roundValue","value","decimals","Number","Math","round","regionRecords","regionOverlayRecords","administrativeZoneDataAll","features","properties","ID_3","NAME_3","createNewRegionRecord","push","formattedCoordinates","geometry","coordinates","latLongData","lat","lng","transformDataForGoogleMaps","paths","strokeColor","strokeWeight","fillColor","fillOpacity","Home","showRegionDetails","activeMarker","currentMedicalFacility","showingInfoWindow","showMedicalFacility","onInfoWindowClose","regionId","_find","marker","totalCasesCount","caseRecordsRecovered","caseRecordsHospitalized","caseRecordsIsolated","caseRecordsDeceased","_forEach","caseRecordsForRegion","caseRecordsForRegionRecovered","caseRecordsForRegionHospitalized","caseRecordsForRegionIsolated","caseRecordsForRegionDeceased","_orderBy","date_reported","regionOverlays","regionOverlayRecord","count","regionRecordForOverlay","caseLevelColor","onMouseover","strokeOpacity","position","visible","onClose","Map","onMapClicked","App","exact","path","component","Boolean","window","location","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7d046ec.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst axiosClient = axios.create();\naxiosClient.defaults.headers.post['Content-Type'] = 'application/json'\n\nexport default axiosClient\n","import axiosClient from '../utils/axios'\n\nexport const GET_CASE_RECORDS_REQUEST = 'GET_CASE_RECORDS_REQUEST'\nexport function getCaseRecordsRequest() {\n  return {\n    type: GET_CASE_RECORDS_REQUEST,\n  }\n}\n\nexport const GET_CASE_RECORDS_SUCCESS = 'GET_CASE_RECORDS_SUCCESS'\nexport function getCaseRecordsSuccess(caseRecords) {\n  return {\n    type: GET_CASE_RECORDS_SUCCESS,\n    payload: caseRecords,\n  }\n}\n\nexport const GET_CASE_RECORDS_FAILURE = 'GET_CASE_RECORDS_FAILURE'\nexport function getCaseRecordsFailure(error) {\n  return {\n    type: GET_CASE_RECORDS_FAILURE,\n    payload: error,\n  }\n}\n\nexport function getCaseRecords() {\n  return (dispatch) => {\n    dispatch(getCaseRecordsRequest())\n    return axiosClient\n      .get(`https://sheetsu.com/apis/v1.0su/1437841cd0c8/`)\n      .then((response) => {\n        dispatch(getCaseRecordsSuccess(response.data))\n      })\n      .catch((error) => {\n        dispatch(getCaseRecordsFailure(error))\n      })\n  }\n}\n\nexport const SET_CURRENT_REGION_RECORD = 'SET_CURRENT_REGION_RECORD'\nexport function setCurrentRegionRecord(regionRecord) {\n  return {\n    type: SET_CURRENT_REGION_RECORD,\n    payload: regionRecord,\n  }\n}\n\nexport const CLEAR_CURRENT_REGION_RECORD = 'CLEAR_CURRENT_REGION_RECORD'\nexport function clearCurrentRegionRecord() {\n  return {\n    type: CLEAR_CURRENT_REGION_RECORD,\n  }\n}\n","import {\n  GET_CASE_RECORDS_REQUEST,\n  GET_CASE_RECORDS_SUCCESS,\n  GET_CASE_RECORDS_FAILURE,\n  SET_CURRENT_REGION_RECORD,\n  CLEAR_CURRENT_REGION_RECORD,\n} from '../actions/caseRecords'\nimport _map from 'lodash/map'\n\nexport const defaultState = {\n  loading: false,\n  caseRecords: [],\n  currentRegionRecord: null,\n}\n\nexport default (state = defaultState, action) => {\n  const newState = Object.assign({}, state)\n\n  switch (action.type) {\n    case GET_CASE_RECORDS_REQUEST:\n      newState.loading = true\n      return newState\n\n    case GET_CASE_RECORDS_SUCCESS:\n      newState.loading = false\n      newState.caseRecords = _map(action.payload, (caseRecord) => {\n        return Object.assign({}, caseRecord, {admin_region_3_id: parseInt(caseRecord.admin_region_3_id)});\n      })\n      return newState\n\n    case GET_CASE_RECORDS_FAILURE:\n      newState.loading = false\n      return newState\n\n    case SET_CURRENT_REGION_RECORD:\n      newState.currentRegionRecord = action.payload\n      return newState\n\n    case CLEAR_CURRENT_REGION_RECORD:\n      newState.currentRegionRecord = null\n      return newState\n\n    default:\n      return state\n  }\n};\n","import axiosClient from '../utils/axios'\n\nexport const GET_MEDICAL_FACILITY_RECORDS_REQUEST = 'GET_MEDICAL_FACILITY_RECORDS_REQUEST'\nexport function getMedicalFacilityRecordsRequest() {\n  return {\n    type: GET_MEDICAL_FACILITY_RECORDS_REQUEST,\n  }\n}\n\nexport const GET_MEDICAL_FACILITY_RECORDS_SUCCESS = 'GET_MEDICAL_FACILITY_RECORDS_SUCCESS'\nexport function getMedicalFacilityRecordsSuccess(medicalFacilityRecords) {\n  return {\n    type: GET_MEDICAL_FACILITY_RECORDS_SUCCESS,\n    payload: medicalFacilityRecords,\n  }\n}\n\nexport const GET_MEDICAL_FACILITY_RECORDS_FAILURE = 'GET_MEDICAL_FACILITY_RECORDS_FAILURE'\nexport function getMedicalFacilityRecordsFailure(error) {\n  return {\n    type: GET_MEDICAL_FACILITY_RECORDS_FAILURE,\n    payload: error,\n  }\n}\n\nexport function getMedicalFacilityRecords() {\n  return (dispatch) => {\n    dispatch(getMedicalFacilityRecordsRequest())\n    return axiosClient\n      .get(`https://sheetsu.com/apis/v1.0su/97079a6a1458/`)\n      .then((response) => {\n        dispatch(getMedicalFacilityRecordsSuccess(response.data))\n      })\n      .catch((error) => {\n        dispatch(getMedicalFacilityRecordsFailure(error))\n      })\n  }\n}\n","import {\n  GET_MEDICAL_FACILITY_RECORDS_REQUEST,\n  GET_MEDICAL_FACILITY_RECORDS_SUCCESS,\n  GET_MEDICAL_FACILITY_RECORDS_FAILURE,\n} from '../actions/medicalFacilityRecords'\nimport _map from 'lodash/map'\n\nexport const defaultState = {\n  loading: false,\n  medicalFacilityRecords: [],\n}\n\nexport default (state = defaultState, action) => {\n  const newState = Object.assign({}, state)\n\n  switch (action.type) {\n    case GET_MEDICAL_FACILITY_RECORDS_REQUEST:\n      newState.loading = true\n      return newState\n\n    case GET_MEDICAL_FACILITY_RECORDS_SUCCESS:\n      newState.loading = false\n      newState.medicalFacilityRecords = _map(action.payload, (medicalFacilityRecord) => {\n        return Object.assign({}, medicalFacilityRecord, {\n          osm_id: parseInt(medicalFacilityRecord.osm_id),\n          admin_region_3_id: parseInt(medicalFacilityRecord.admin_region_3_id),\n          latitude: parseFloat(medicalFacilityRecord.latitude),\n          longitude: parseFloat(medicalFacilityRecord.longitude),\n        });\n      })\n      return newState\n\n    case GET_MEDICAL_FACILITY_RECORDS_FAILURE:\n      newState.loading = false\n      return newState\n\n    default:\n      return state\n  }\n};\n","import { combineReducers } from 'redux'\nimport caseRecords from './caseRecords'\nimport medicalFacilityRecords from './medicalFacilityRecords'\n\nconst rootReducer = combineReducers({\n  caseRecords,\n  medicalFacilityRecords,\n})\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport asyncReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(asyncReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React, { Component } from 'react'\nimport { Map, GoogleApiWrapper } from 'google-maps-react'\n\nexport class MapContainer extends Component {\n  render() {\n    const { centerCoordinates, polygons, markers, infoWindows } = this.props\n\n    return (\n      <Map\n        google={this.props.google}\n        className=\"map___container\"\n        initialCenter={centerCoordinates}\n        zoom={6.52}\n      >\n        { polygons }\n        { markers }\n        { infoWindows }\n      </Map>\n    );\n  }\n}\n\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n})(MapContainer);\n","import React, { Component } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport _map from 'lodash/map'\nimport moment from 'moment'\n\nexport default class TotalCasesPanel extends Component {\n  render() {\n    const { totalCount, totalCaseRecordsRecovered, totalCaseRecordsHospitalized, totalCaseRecordsIsolated, totalCaseRecordsDeceased, topFiveRegions } = this.props\n\n    const totalCasesHeaderClasses = classNames({\n        'total_cases_panel___header': true,\n        'total_cases_panel___total_cases_header': true,\n    })\n\n    const totalRecoveredHeaderClasses = classNames({\n        'total_cases_panel___header': true,\n        'total_cases_panel___total_recovered_header': true,\n    })\n\n    const totalHospitalizedHeaderClasses = classNames({\n        'total_cases_panel___header': true,\n        'total_cases_panel___total_hospitalized_header': true,\n    })\n\n    const totalIsolatedHeaderClasses = classNames({\n        'total_cases_panel___header': true,\n        'total_cases_panel___total_isolated_header': true,\n    })\n\n    const totalDeceasedHeaderClasses = classNames({\n        'total_cases_panel___header': true,\n        'total_cases_panel___total_deceased_header': true,\n    })\n\n    const topRegions = _map(topFiveRegions, (regionRecord, index) => {\n      return (\n        <tr key={index}>\n          <td className=\"total_cases_panel___table_row\">{ regionRecord.name }</td>\n          <td className=\"total_cases_panel___table_row\">{ regionRecord.totalCases }</td>\n          <td className=\"total_cases_panel___table_row\">{ regionRecord.firstCase ? moment(regionRecord.firstCase).format(\"M/DD/YYYY\") : \"N/A\" }</td>\n        </tr>\n      )\n    })\n\n    return (\n      <div>\n        <div className=\"total_cases_panel___total_cases_container\">\n          <Row>\n            <Col xs={8}>\n              <h3 className={totalCasesHeaderClasses}>Total Confirmed Cases</h3>\n            </Col>\n            <Col xs={4}>\n              <h3 className=\"total_cases_panel___total_cases_value\">{ totalCount }</h3>\n            </Col>\n          </Row>\n        </div>\n        <Row>\n          <Col xs={8}>\n            <h3 className={totalRecoveredHeaderClasses}>Total Recovered</h3>\n          </Col>\n          <Col xs={4}>\n            <p className=\"total_cases_panel___value\">{ totalCaseRecordsRecovered }</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={8}>\n            <h3 className={totalHospitalizedHeaderClasses}>Total Hospitalized</h3>\n          </Col>\n          <Col xs={4}>\n            <p className=\"total_cases_panel___value\">{ totalCaseRecordsHospitalized }</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={8}>\n            <h3 className={totalIsolatedHeaderClasses}>Total Isolated</h3>\n          </Col>\n          <Col xs={4}>\n            <p className=\"total_cases_panel___value\">{ totalCaseRecordsIsolated }</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={8}>\n            <h3 className={totalDeceasedHeaderClasses}>Total Deceased</h3>\n          </Col>\n          <Col xs={4}>\n            <p className=\"total_cases_panel___value\">{ totalCaseRecordsDeceased }</p>\n          </Col>\n        </Row>\n        <Row className=\"total_cases_panel___total_header_container\">\n          <Col xs={8}>\n            <h3 className=\"total_cases_panel___header\">Total</h3>\n          </Col>\n          <Col xs={4}>\n            <p className=\"total_cases_panel___value\"><strong>{ totalCount }</strong></p>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <h3 className=\"total_cases_panel___table_container_header\">Most Affected Regions</h3>\n            <div className=\"total_cases_panel___table_container\">\n              <table className=\"total_cases_panel___table\">\n                <thead>\n                  <tr>\n                    <th className=\"total_cases_panel___table_header\">Woreda</th>\n                    <th className=\"total_cases_panel___table_header\">Cases</th>\n                    <th className=\"total_cases_panel___table_header\">First Case</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  { topRegions }\n                </tbody>\n              </table>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport classNames from 'classnames'\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst AVAILABLE_STATUS = \"available\"\nconst UNAVAILABLE_STATUS = \"unavailable\"\nconst FULL_STATUS = \"full\"\n\nexport default class MedicalFacilityCard extends Component {\n  render() {\n    const { medicalFacilityRecord  } = this.props\n\n    const statusClasses = classNames({\n        'medical_facility_card__status_available': (medicalFacilityRecord.status === AVAILABLE_STATUS),\n        'medical_facility_card__status_unavailable': (medicalFacilityRecord.status === UNAVAILABLE_STATUS),\n        'medical_facility_card__status_full': (medicalFacilityRecord.status === FULL_STATUS),\n    })\n\n\n    let percentFreeBeds = 100 - ((medicalFacilityRecord.occupied_beds / medicalFacilityRecord.total_beds) * 100)\n    const availableBedsClasses = classNames({\n        'medical_facility_card__available_beds_great': (percentFreeBeds > 70.0),\n        'medical_facility_card__available_beds_good': (percentFreeBeds <= 70.0 && percentFreeBeds > 30.0),\n        'medical_facility_card__available_beds_bad': (percentFreeBeds <= 30.0),\n    })\n\n    let percentICUFreeBeds = 100 - ((medicalFacilityRecord.occupied_icu_beds / medicalFacilityRecord.total_icu_beds) * 100)\n    const availableICUBedsClasses = classNames({\n        'medical_facility_card__available_beds_great': (percentICUFreeBeds > 70.0),\n        'medical_facility_card__available_beds_good': (percentICUFreeBeds <= 70.0 && percentICUFreeBeds > 30.0),\n        'medical_facility_card__available_beds_bad': (percentICUFreeBeds <= 30.0),\n    })\n\n    const availableTestingKitsClasses = classNames({\n        'medical_facility_card__great': (medicalFacilityRecord.testing_kits > 300),\n        'medical_facility_card__good': (medicalFacilityRecord.testing_kits <= 300 && medicalFacilityRecord.testing_kits > 100),\n        'medical_facility_card__bad': (medicalFacilityRecord.testing_kits <= 100),\n    })\n\n    const availableMasksClasses= classNames({\n      'medical_facility_card__great': (medicalFacilityRecord.masks > 300),\n      'medical_facility_card__good': (medicalFacilityRecord.masks <= 300 && medicalFacilityRecord.masks > 100),\n      'medical_facility_card__bad': (medicalFacilityRecord.masks <= 100),\n    })\n\n    const availableGlovesClasses= classNames({\n        'medical_facility_card__great': (medicalFacilityRecord.gloves > 300),\n        'medical_facility_card__good': (medicalFacilityRecord.gloves <= 300 && medicalFacilityRecord.gloves > 100),\n        'medical_facility_card__bad': (medicalFacilityRecord.gloves <= 100),\n    })\n\n\n    return (\n      <div>\n        <Row>\n          <Col xs={12}>\n            <h4 className=\"medical_facility_card__name\">{ medicalFacilityRecord.name }</h4>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <div className=\"medical_facility_card__table_container\">\n              <table className=\"medical_facility_card__table\">\n                <tbody>\n                  <tr>\n                    <td className=\"\">Facility Type</td>\n                    <td>{ capitalizeFirstLetter(medicalFacilityRecord.amenity) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Status</td>\n                    <td className={statusClasses}>{ capitalizeFirstLetter(medicalFacilityRecord.status) }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Occupied Beds</td>\n                    <td>{ medicalFacilityRecord.occupied_beds }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Available Beds</td>\n                    <td className={availableBedsClasses}>{ medicalFacilityRecord.total_beds - medicalFacilityRecord.occupied_beds }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Total Beds</td>\n                    <td>{ medicalFacilityRecord.total_beds }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Occupied ICU Beds</td>\n                    <td>{ medicalFacilityRecord.occupied_icu_beds }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Available ICU Beds</td>\n                    <td className={availableICUBedsClasses}>{ medicalFacilityRecord.total_icu_beds - medicalFacilityRecord.occupied_icu_beds }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Total ICU Beds</td>\n                    <td>{ medicalFacilityRecord.total_icu_beds }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Testing Kits</td>\n                    <td className={availableTestingKitsClasses}>{ medicalFacilityRecord.testing_kits }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Masks</td>\n                    <td className={availableMasksClasses}>{ medicalFacilityRecord.masks }</td>\n                  </tr>\n                  <tr>\n                    <td className=\"\">Gloves</td>\n                    <td className={availableGlovesClasses}>{ medicalFacilityRecord.gloves }</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport { bindActionCreators } from 'redux'\nimport _map from 'lodash/map'\nimport _filter from 'lodash/filter'\n\nimport MedicalFacilityCard from './MedicalFacilityCard'\n\nclass MedicalFacilitiesPanel extends Component {\n  render() {\n    const {\n      currentRegionRecord,\n      medicalFacilityRecords,\n    } = this.props\n\n    var title = ''\n    if (currentRegionRecord) {\n      title = (\n        <h4 className=\"medical_facilities_panel__header\">{ currentRegionRecord.name } Health Facilities</h4>\n      )\n    } else {\n      title = (\n        <h4 className=\"medical_facilities_panel__empty_header\">All Health Facilities</h4>\n      )\n    }\n\n    var medicalFacilitiesForRegion = []\n    if (currentRegionRecord) {\n      console.log(medicalFacilityRecords);\n      let medicalFacilitiesRecordsForRegion = _filter(medicalFacilityRecords, { 'admin_region_3_id': currentRegionRecord.adminRegion3Id })\n\n      if (medicalFacilitiesRecordsForRegion.length > 0) {\n        medicalFacilitiesForRegion = _map(medicalFacilitiesRecordsForRegion, (medicalFacilityRecord) => {\n          return (\n            <MedicalFacilityCard\n              medicalFacilityRecord={medicalFacilityRecord}\n            />\n          )\n        })\n      } else {\n        medicalFacilitiesForRegion = (\n          <h4 className=\"medical_facilities_panel__empty_header\">No medical facilities in region</h4>\n        )\n      }\n    } else {\n      medicalFacilitiesForRegion = _map(medicalFacilityRecords, (medicalFacilityRecord) => {\n        return (\n          <MedicalFacilityCard\n            medicalFacilityRecord={medicalFacilityRecord}\n          />\n        )\n      })\n    }\n\n    return (\n      <div>\n        <Row>\n          <Col xs={12}>\n              { title }\n              <div className=\"medical_facilities_panel__card_container\">\n                { medicalFacilitiesForRegion }\n              </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    currentRegionRecord: state.caseRecords.currentRegionRecord,\n    medicalFacilityRecords: state.medicalFacilityRecords.medicalFacilityRecords,\n  }),\n  dispatch => bindActionCreators({\n  }, dispatch),\n)(MedicalFacilitiesPanel)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport { bindActionCreators } from 'redux'\n\nexport default class NewPanel extends Component {\n  render() {\n    // const { } = this.props\n\n    return (\n      <div>\n        <Row>\n          <Col xs={12}>\n            <h4>New Panel</h4>\n            <p>**input your content here**</p>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport classNames from 'classnames'\n\nimport TotalCasesPanel from './TotalCasesPanel'\nimport MedicalFacilitiesPanel from './MedicalFacilitiesPanel'\nimport NewPanel from './NewPanel'\n\nconst TOTAL_CASES_TAB = \"totalCases\"\nconst MEDICAL_FACILITIES_TAB = \"medicalFacilities\"\nconst NEW_TAB = \"new\"\n\nexport default class DataPanel extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      currentTab: TOTAL_CASES_TAB,\n    }\n\n    this.showPanel = this.showPanel.bind(this)\n  }\n  showPanel(panelName) {\n    this.setState({\n      currentTab: panelName,\n    })\n  }\n  render() {\n    const {\n      loadingCaseRecords,\n      loadingMedicalFacilityRecords,\n      totalCount,\n      totalCaseRecordsRecovered,\n      totalCaseRecordsHospitalized,\n      totalCaseRecordsIsolated,\n      totalCaseRecordsDeceased,\n      topFiveRegions,\n    } = this.props\n\n    const tabOneClasses = classNames({\n        'data_panel___tab': true,\n        'data_panel___tab_active': (this.state.currentTab === TOTAL_CASES_TAB),\n    })\n\n    const tabTwoClasses = classNames({\n        'data_panel___tab': true,\n        'data_panel___tab_active': (this.state.currentTab === MEDICAL_FACILITIES_TAB),\n    })\n\n    const tabThreeClasses = classNames({\n        'data_panel___tab': true,\n        'data_panel___tab_active': (this.state.currentTab === NEW_TAB),\n    })\n\n    const finishedLoadingCaseRecords = loadingCaseRecords && (loadingCaseRecords === true)\n    const finishedLoadingMedicalFacilityRecords = loadingMedicalFacilityRecords && (loadingMedicalFacilityRecords === true)\n\n    // Logic for choosing panel\n    var currentPanel = ''\n    if (this.state.currentTab === TOTAL_CASES_TAB) {\n      if (finishedLoadingCaseRecords) {\n        currentPanel = (\n          <p>Loading...</p>\n        )\n      } else {\n        currentPanel = (\n          <TotalCasesPanel\n            totalCount={totalCount}\n            totalCaseRecordsRecovered={totalCaseRecordsRecovered}\n            totalCaseRecordsHospitalized={totalCaseRecordsHospitalized}\n            totalCaseRecordsIsolated={totalCaseRecordsIsolated}\n            totalCaseRecordsDeceased={totalCaseRecordsDeceased}\n            topFiveRegions={topFiveRegions}\n          />\n        )\n      }\n    }\n\n    if (this.state.currentTab === MEDICAL_FACILITIES_TAB) {\n      if (\n        finishedLoadingCaseRecords &&\n        finishedLoadingMedicalFacilityRecords &&\n        totalCount\n      )\n      {\n        currentPanel = (\n          <p>Loading...</p>\n        )\n      } else {\n        currentPanel = (\n          <MedicalFacilitiesPanel\n            totalCount={totalCount}\n          />\n        )\n      }\n    }\n\n\n    // Update accordingly with your data loading\n    if (this.state.currentTab === NEW_TAB) {\n      if (finishedLoadingCaseRecords && finishedLoadingMedicalFacilityRecords) {\n        currentPanel = (\n          <p>Loading...</p>\n        )\n      } else {\n        currentPanel = (\n          <NewPanel\n          />\n        )\n      }\n    }\n\n    return (\n      <Row className=\"data_panel___row_container\">\n        <Col xs={4} className=\"data_panel___container\">\n        <div className=\"data_panel___tabs_shadow_cutoff_container\">\n            <div className=\"data_panel___tabs_container\">\n              <Row>\n                <Col xs={4}>\n                  <div className={tabOneClasses}>\n                    <p className=\"data_panel___tab_link\" onClick={(e) => this.showPanel(TOTAL_CASES_TAB, e)}>Cases</p>\n                  </div>\n                </Col>\n                <Col xs={4}>\n                  <div className={tabTwoClasses}>\n                    <p className=\"data_panel___tab_link\" onClick={(e) => this.showPanel(MEDICAL_FACILITIES_TAB, e)}>Facilities</p>\n                  </div>\n                </Col>\n                <Col xs={4}>\n                  <div className={tabThreeClasses}>\n                    <p className=\"data_panel___tab_link\" onClick={(e) => this.showPanel(NEW_TAB, e)}>New</p>\n                  </div>\n                </Col>\n              </Row>\n            </div>\n          </div>\n          <h1 className=\"data_panel___main_header\">Ethiopia COVID-19 Case Tracker</h1>\n          { currentPanel }\n        </Col>\n      </Row>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport { bindActionCreators } from 'redux'\n\nclass RegionDetails extends Component {\n  render() {\n    const { regionRecord } = this.props\n\n    return (\n      <Row>\n        <Col xs={3} className=\"region_details___container\">\n          <Row>\n            <Col xs={12}>\n              <h2 className=\"region_details__name_header\">{ regionRecord.name } <span className=\"region_details__region_id\">ID: { regionRecord.adminRegion3Id }</span></h2>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12}>\n              <div className=\"region_details__table_container\">\n                <table className=\"region_details__table\">\n                  <thead>\n                    <tr>\n                      <th>Status</th>\n                      <th>Total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td className=\"region_details__table_row_recovered\">Recovered</td>\n                      <td>{ regionRecord.totalRecovered }</td>\n                    </tr>\n                    <tr>\n                      <td className=\"region_details__table_row_hospitalized\">Hospitalized</td>\n                      <td>{ regionRecord.totalHospitalized }</td>\n                    </tr>\n                    <tr>\n                      <td className=\"region_details__table_row_isolated\">Isolated</td>\n                      <td>{ regionRecord.totalIsolated }</td>\n                    </tr>\n                    <tr>\n                      <td className=\"region_details__table_row_deceased\">Deceased</td>\n                      <td>{ regionRecord.totalDeceased }</td>\n                    </tr>\n                    <tr className=\"region_details__total_case_table_row\">\n                      <td className=\"region_details__total_case_table_entry\">Total Cases</td>\n                      <td className=\"region_details__total_case_table_entry\">{ regionRecord.totalCases }</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n  }),\n  dispatch => bindActionCreators({\n  }, dispatch),\n)(RegionDetails)\n","import React, { Component } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport classNames from 'classnames'\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst AVAILABLE_STATUS = \"available\"\nconst UNAVAILABLE_STATUS = \"unavailable\"\nconst FULL_STATUS = \"full\"\n\nexport default class HospitalDetails extends Component {\n  render() {\n    const { medicalFacilityRecord } = this.props\n\n    const statusClasses = classNames({\n        'hospital_details__status_available': (medicalFacilityRecord.status === AVAILABLE_STATUS),\n        'hospital_details__status_unavailable': (medicalFacilityRecord.status === UNAVAILABLE_STATUS),\n        'hospital_details__status_full': (medicalFacilityRecord.status === FULL_STATUS),\n    })\n\n\n    let percentFreeBeds = 100 - ((medicalFacilityRecord.occupied_beds / medicalFacilityRecord.total_beds) * 100)\n    const availableBedsClasses = classNames({\n        'hospital_details__available_beds_great': (percentFreeBeds > 70.0),\n        'hospital_details__available_beds_good': (percentFreeBeds <= 70.0 && percentFreeBeds > 30.0),\n        'hospital_details__available_beds_bad': (percentFreeBeds <= 30.0),\n    })\n\n    return (\n      <Row>\n        <Col xs={12}>\n          <Row>\n            <Col xs={12}>\n              <h4 className=\"hospital_details__faciliy_type_header\">Facility Type: { capitalizeFirstLetter(medicalFacilityRecord.amenity) }</h4>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12}>\n              <p className=\"hospital_details__status\">Status: <span className={statusClasses}>{ capitalizeFirstLetter(medicalFacilityRecord.status) }</span></p>\n              <p className=\"hospital_details__available_beds\">Available Beds: <span className={availableBedsClasses}>{ medicalFacilityRecord.total_beds - medicalFacilityRecord.occupied_beds }</span></p>\n              <p className=\"hospital_details__address_street\">{ medicalFacilityRecord.street },</p>\n              <p className=\"hospital_details__address_city_state\">{ medicalFacilityRecord.city }, { medicalFacilityRecord.admin_region_3 }</p>\n              <p className=\"hospital_details__hours\">Hours: { medicalFacilityRecord.opening_hours }</p>\n              <p className=\"hospital_details__phone\">Phone: { medicalFacilityRecord.contact_number } </p>\n              <p className=\"hospital_details__operator\">Operator: { medicalFacilityRecord.operator }</p>\n              <p className=\"hospital_details__operator_phone\">Operator Phone: { medicalFacilityRecord.operator_contact_number }</p>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Polygon, Marker, InfoWindow } from 'google-maps-react'\nimport _map from 'lodash/map'\nimport _forEach from 'lodash/forEach'\nimport _filter from 'lodash/filter'\nimport _find from 'lodash/find'\nimport _orderBy from 'lodash/orderBy'\n\nimport administrativeZoneDataAll from '../../data/ethiopia_administrative_zones_full.json'\n\nimport {\n  getCaseRecords,\n  setCurrentRegionRecord,\n  clearCurrentRegionRecord,\n} from '../../actions/caseRecords'\nimport { getMedicalFacilityRecords } from '../../actions/medicalFacilityRecords'\n\nimport MapContainer from './Map'\nimport DataPanel from './DataPanel'\nimport RegionDetails from './RegionDetails'\nimport HospitalDetails from './HospitalDetails'\n\nconst POLYGON_COLORS = [\n  \"#228b22\",\n  \"#ff8000\",\n  \"#ff0000\"\n]\n\nfunction roundValue(value, decimals) {\n  return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n}\n\nfunction polygonColor(count) {\n  if (count === 0) {\n    return POLYGON_COLORS[0]\n  }\n\n  if (count < 10 && count > 0) {\n    return POLYGON_COLORS[1]\n  }\n\n  if (count > 10) {\n    return POLYGON_COLORS[2]\n  }\n}\n\nfunction transformDataForGoogleMaps(latLongData) {\n  return { lat: parseFloat(roundValue(latLongData[1], 3)) ? parseFloat(roundValue(latLongData[1], 3)) : 0, lng: parseFloat(roundValue(latLongData[0], 3)) ? parseFloat(roundValue(latLongData[0], 3)) : 0 }\n}\n\nfunction createNewRegionRecord(data) {\n  return {\n    adminRegion3Id: data.properties.ID_3,\n    name: data.properties.NAME_3,\n    totalCases: 0,\n    totalRecovered: 0,\n    totalHospitalized: 0,\n    totalIsolated: 0,\n    totalDeceased: 0,\n    firstCase: null,\n  }\n}\n\nvar regionRecords = []\nconst regionOverlayRecords = _map(administrativeZoneDataAll[0].features, (data, index) => {\n  let regionRecord = createNewRegionRecord(data)\n  regionRecords.push(regionRecord)\n\n  const formattedCoordinates = _map(data.geometry.coordinates[0], (latLongData) => {\n    const coordinates = transformDataForGoogleMaps(latLongData)\n    return coordinates\n  })\n\n  return { adminRegion3Id: data.properties.ID_3, key: index, paths: formattedCoordinates, strokeColor: \"#000000\", strokeWeight: 2, fillColor: POLYGON_COLORS[1], fillOpacity: 0.45 }\n})\n\nclass Home extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showRegionDetails: false,\n      activeMarker: null,\n      currentMedicalFacility: null,\n      showingInfoWindow: false,\n    }\n\n    this.showRegionDetails = this.showRegionDetails.bind(this)\n    this.showMedicalFacility = this.showMedicalFacility.bind(this)\n    this.onInfoWindowClose = this.onInfoWindowClose.bind(this)\n  }\n  componentDidMount() {\n    const { getCaseRecords, getMedicalFacilityRecords, clearCurrentRegionRecord } = this.props\n\n    clearCurrentRegionRecord()\n    getCaseRecords()\n    getMedicalFacilityRecords()\n  }\n  showRegionDetails(regionId) {\n    const { setCurrentRegionRecord } = this.props\n\n    let currentRegionRecord = _find(regionRecords, { 'adminRegion3Id': regionId })\n    if (currentRegionRecord) {\n      setCurrentRegionRecord(currentRegionRecord)\n\n      this.setState({\n        showRegionDetails: true,\n      })\n    }\n  }\n  showMedicalFacility(props, marker) {\n    const { medicalFacilityRecords } = this.props\n\n    let currentMedicalFacility = _find(medicalFacilityRecords, { 'osm_id': props.medicalFacilityRecord.osm_id })\n    this.setState({\n      activeMarker: marker,\n      currentMedicalFacility: currentMedicalFacility,\n      showingInfoWindow: true\n    })\n  }\n  onMapClicked() {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        activeMarker: null,\n        showingInfoWindow: false\n      })\n    }\n  }\n  onInfoWindowClose() {\n    this.setState({\n      activeMarker: null,\n      showingInfoWindow: false\n    })\n  }\n  render() {\n    const { loadingCaseRecords, currentRegionRecord, loadingMedicalFacilityRecords, caseRecords, medicalFacilityRecords } = this.props\n\n    const centerPoint = {\n     lat: 9.1606,\n     lng: 37.6\n    }\n\n\n    // Total Cases Panel data\n    var totalCasesCount = 0\n    var caseRecordsRecovered = []\n    var caseRecordsHospitalized = []\n    var caseRecordsIsolated = []\n    var caseRecordsDeceased = []\n    var topFiveRegions = []\n    if (caseRecords.length > 0) {\n      _forEach(regionRecords, (regionRecord) => {\n        let regionId = parseInt(regionRecord.adminRegion3Id)\n        let caseRecordsForRegion = _filter(caseRecords, { 'admin_region_3_id': regionId })\n\n        let caseRecordsForRegionRecovered = _filter(caseRecordsForRegion, { 'status': 'recovered' })\n        let caseRecordsForRegionHospitalized = _filter(caseRecordsForRegion, { 'status': 'hospitalized' })\n        let caseRecordsForRegionIsolated = _filter(caseRecordsForRegion, { 'status': 'isolated' })\n        let caseRecordsForRegionDeceased = _filter(caseRecordsForRegion, { 'status': 'deceased' })\n\n        let firstCase = _orderBy(caseRecordsForRegion, ['date_reported', 'name'], ['asc', 'desc'])[0]\n        if (firstCase) {\n          regionRecord.firstCase = firstCase.date_reported\n        }\n        regionRecord.totalRecovered = caseRecordsForRegionRecovered.length\n        regionRecord.totalHospitalized = caseRecordsForRegionHospitalized.length\n        regionRecord.totalIsolated = caseRecordsForRegionIsolated.length\n        regionRecord.totalDeceased = caseRecordsForRegionDeceased.length\n\n        totalCasesCount = caseRecords.length\n        caseRecordsRecovered = _filter(caseRecords, { 'status': 'recovered' })\n        caseRecordsHospitalized = _filter(caseRecords, { 'status': 'hospitalized' })\n        caseRecordsIsolated = _filter(caseRecords, { 'status': 'isolated' })\n        caseRecordsDeceased = _filter(caseRecords, { 'status': 'deceased' })\n\n        regionRecord.totalCases = caseRecordsForRegion.length\n      })\n\n      topFiveRegions = _orderBy(regionRecords, ['totalCases', 'name'], ['desc', 'asc']).slice(0, 20)\n    }\n\n\n    // Map Overlay for each region\n    var regionOverlays = []\n    if (caseRecords.length > 0 && regionOverlayRecords.length > 0) {\n      regionOverlays = _map(regionOverlayRecords, (regionOverlayRecord) => {\n        let regionId = regionOverlayRecord.adminRegion3Id\n        let regionRecordForOverlay = _find(regionRecords, { 'adminRegion3Id': regionId })\n\n        const caseLevelColor = polygonColor(regionRecordForOverlay.totalCases)\n        return (\n          <Polygon\n              key={regionOverlayRecord.key}\n              onMouseover={() => this.showRegionDetails(regionId)}\n              paths={regionOverlayRecord.paths}\n              strokeColor={regionOverlayRecord.strokeColor}\n              strokeOpacity={regionOverlayRecord.strokeOpacity}\n              strokeWeight={regionOverlayRecord.strokeWeight}\n              fillColor={caseLevelColor}\n              fillOpacity={regionOverlayRecord.fillOpacity}\n            />\n        )\n      })\n    }\n\n    // Medical facility markers\n    var markers = []\n    if (medicalFacilityRecords.length > 0) {\n      markers = _map(medicalFacilityRecords, (medicalFacilityRecord, index) => {\n        let coordinates = { lat: medicalFacilityRecord.latitude, lng: medicalFacilityRecord.longitude }\n        return (\n          <Marker\n            key={index}\n            medicalFacilityRecord={medicalFacilityRecord}\n            title={medicalFacilityRecord.amenity}\n            name={medicalFacilityRecord.amenity}\n            position={coordinates}\n            onClick={this.showMedicalFacility}\n          />\n        )\n      })\n    }\n\n    // Medical facility tooltips\n    var infoWindows = []\n    if (this.state.currentMedicalFacility) {\n      infoWindows = _map(medicalFacilityRecords, (medicalFacilityRecord, index) => {\n        return (\n          <InfoWindow\n            key={index}\n            marker={this.state.activeMarker}\n            visible={(this.state.currentMedicalFacility.osm_id === medicalFacilityRecord.osm_id) && this.state.showingInfoWindow}\n            onClose={this.onInfoWindowClose}\n          >\n            <div className=\"home__info_window_container\">\n              <h3 className=\"home__info_window_header\">{ this.state.currentMedicalFacility.name }</h3>\n              <HospitalDetails\n                medicalFacilityRecord={this.state.currentMedicalFacility}\n              />\n            </div>\n          </InfoWindow>\n        )\n      })\n    }\n\n\n    return (\n      <div>\n        <DataPanel\n          medicalFacilityRecords={medicalFacilityRecords}\n          loadingCaseRecords={loadingCaseRecords}\n          loadingMedicalFacilityRecords={loadingMedicalFacilityRecords}\n          totalCount={totalCasesCount}\n          totalCaseRecordsRecovered={caseRecordsRecovered.length}\n          totalCaseRecordsHospitalized={caseRecordsHospitalized.length}\n          totalCaseRecordsIsolated={caseRecordsIsolated.length}\n          totalCaseRecordsDeceased={caseRecordsDeceased.length}\n          totalDeceased={caseRecordsDeceased.length}\n          topFiveRegions={topFiveRegions}\n        />\n        {\n          this.state.showRegionDetails ?\n          <RegionDetails\n            regionRecord={currentRegionRecord}\n          />\n          :\n          ''\n        }\n        <MapContainer\n          onClick={this.onMapClicked}\n          centerCoordinates={centerPoint}\n          polygons={regionOverlays}\n          markers={markers}\n          infoWindows={infoWindows}\n        />\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    loadingCaseRecords: state.caseRecords.loading,\n    caseRecords: state.caseRecords.caseRecords,\n    currentRegionRecord: state.caseRecords.currentRegionRecord,\n    loadingMedicalFacilityRecords: state.medicalFacilityRecords.loading,\n    medicalFacilityRecords: state.medicalFacilityRecords.medicalFacilityRecords,\n  }),\n  dispatch => bindActionCreators({\n    getCaseRecords,\n    setCurrentRegionRecord,\n    clearCurrentRegionRecord,\n    getMedicalFacilityRecords,\n  }, dispatch),\n)(Home)\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\nimport { Provider } from 'react-redux'\nimport store from './reducers/store'\n\nimport Home from './components/LandingPage/Home'\n\nfunction App() {\n  return (\n    <Router>\n      <Provider store={store}>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n        </div>\n      </Provider>\n    </Router>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}